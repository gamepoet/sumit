#!/usr/bin/env node
const djb2a = require('djb2a')
const farmhash = require('farmhash')
const fnv1a = require('@sindresorhus/fnv1a');
const fs = require('fs')
const hex2dec = require('hex2dec')
const murmurhash = require('murmurhash')
const program = require('commander')
const sdbm = require('sdbm')
const version = require('../package.json').version

function hashInput(algorithm, input, seed) {
  switch (algorithm) {
    case 'djb2a':
      return djb2a(input)

    case 'fnv1a':
      return fnv1a(input)

    case 'farmhash32':
      if (seed === undefined || seed === null) {
        return farmhash.hash32(input)
      }
      else {
        return farmhash.hash32WithSeed(input, seed)
      }

    case 'farmhash64':
      if (seed === undefined || seed === null) {
        return farmhash.hash64(input)
      }
      else {
        return farmhash.hash64WithSeed(input, seed)
      }

    case 'murmurhash':
    case 'murmurhash2':
      if (seed === undefined || seed === null) {
        return murmurhash.v2(input)
      }
      else {
        return murmurhash.v2(input, seed)
      }

    case 'murmurhash3':
      if (seed === undefined || seed === null) {
        return murmurhash.v3(input)
      }
      else {
        return murmurhash.v3(input, seed)
      }

    case 'sdbm':
      return sdbm(input)

    default:
      throw new Error(`unknown algorithm: ${algorithm}`)
  }
}

function hashAndPrint(algorithm, seed, filename, data) {
  const hash = hashInput(algorithm, data, seed)
  const hashHex = hex2dec.decToHex(hash.toString(), {prefix: false})
  console.log(`${hashHex}  ${filename}`)
}

program
  .version(version)
  .usage('[options]')
  .option('-a, --algorithm [ALGORITHM]', 'the hash algorithm to use')
  .option('-s, --seed [SEED]', 'the seed to use (if any)')
  .parse(process.argv)

const algorithm = program.algorithm
const seed = program.seed

if (program.args.length > 0) {
  program.args.forEach((filename) => {
    const data = fs.readFileSync(filename, 'binary')
    hashAndPrint(program.algorithm, program.seed, filename, data)
  })
}
else {
  const stdin = process.stdin
  const chunks = []
  stdin.resume()
  stdin.setEncoding('binary')
  stdin.on('data', function (chunk) {
    chunks.push(chunk)
  })
  stdin.on('end', function () {
    const data = chunks.join()
    hashAndPrint(program.algorithm, program.seed, '-', data)
  })
}
